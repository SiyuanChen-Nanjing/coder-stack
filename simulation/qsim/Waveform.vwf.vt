// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2020 02:45:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          encoder_top_parallel
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module encoder_top_parallel_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cbs_blocksize;
reg [7:0] cbs_din;
reg cbs_fifo_empty;
reg cbs_ready;
reg clock;
reg [7:0] int_din;
reg int_ready;
reg reset;
// wires                                               
wire cbs_fifo_rreq;
wire [2:0] d_state;
wire out_valid;
wire [7:0] xk_out;
wire [7:0] zk_out;
wire [7:0] zk_prime_out;

// assign statements (if any)                          
encoder_top_parallel i1 (
// port map - connection between master ports and signals/registers   
	.cbs_blocksize(cbs_blocksize),
	.cbs_din(cbs_din),
	.cbs_fifo_empty(cbs_fifo_empty),
	.cbs_fifo_rreq(cbs_fifo_rreq),
	.cbs_ready(cbs_ready),
	.clock(clock),
	.d_state(d_state),
	.int_din(int_din),
	.int_ready(int_ready),
	.out_valid(out_valid),
	.reset(reset),
	.xk_out(xk_out),
	.zk_out(zk_out),
	.zk_prime_out(zk_prime_out)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// cbs_ready
initial
begin
	cbs_ready = 1'b0;
	cbs_ready = #120000 1'b1;
	cbs_ready = #20000 1'b0;
end 

// cbs_blocksize
initial
begin
	cbs_blocksize = 1'b0;
	cbs_blocksize = #140000 1'b1;
	cbs_blocksize = #20000 1'b0;
end 
// cbs_din[ 7 ]
initial
begin
	cbs_din[7] = 1'b0;
	cbs_din[7] = #180000 1'b1;
	cbs_din[7] = #40000 1'b0;
end 
// cbs_din[ 6 ]
initial
begin
	cbs_din[6] = 1'b0;
	cbs_din[6] = #180000 1'b1;
	cbs_din[6] = #20000 1'b0;
end 
// cbs_din[ 5 ]
initial
begin
	cbs_din[5] = 1'b0;
	cbs_din[5] = #180000 1'b1;
	cbs_din[5] = #20000 1'b0;
end 
// cbs_din[ 4 ]
initial
begin
	cbs_din[4] = 1'b0;
	cbs_din[4] = #180000 1'b1;
	cbs_din[4] = #40000 1'b0;
end 
// cbs_din[ 3 ]
initial
begin
	cbs_din[3] = 1'b0;
	cbs_din[3] = #160000 1'b1;
	cbs_din[3] = #20000 1'b0;
	cbs_din[3] = #20000 1'b1;
	cbs_din[3] = #20000 1'b0;
end 
// cbs_din[ 2 ]
initial
begin
	cbs_din[2] = 1'b0;
	cbs_din[2] = #160000 1'b1;
	cbs_din[2] = #20000 1'b0;
end 
// cbs_din[ 1 ]
initial
begin
	cbs_din[1] = 1'b0;
	cbs_din[1] = #160000 1'b1;
	cbs_din[1] = #20000 1'b0;
end 
// cbs_din[ 0 ]
initial
begin
	cbs_din[0] = 1'b0;
	cbs_din[0] = #160000 1'b1;
	cbs_din[0] = #20000 1'b0;
	cbs_din[0] = #20000 1'b1;
	cbs_din[0] = #20000 1'b0;
end 

// int_ready
initial
begin
	int_ready = 1'b0;
	int_ready = #240000 1'b1;
	int_ready = #20000 1'b0;
end 
// int_din[ 7 ]
initial
begin
	int_din[7] = 1'b0;
	int_din[7] = #280000 1'b1;
	int_din[7] = #40000 1'b0;
end 
// int_din[ 6 ]
initial
begin
	int_din[6] = 1'b0;
	int_din[6] = #280000 1'b1;
	int_din[6] = #20000 1'b0;
end 
// int_din[ 5 ]
initial
begin
	int_din[5] = 1'b0;
	int_din[5] = #280000 1'b1;
	int_din[5] = #20000 1'b0;
end 
// int_din[ 4 ]
initial
begin
	int_din[4] = 1'b0;
	int_din[4] = #280000 1'b1;
	int_din[4] = #40000 1'b0;
end 
// int_din[ 3 ]
initial
begin
	int_din[3] = 1'b0;
	int_din[3] = #260000 1'b1;
	int_din[3] = #20000 1'b0;
	int_din[3] = #20000 1'b1;
	int_din[3] = #20000 1'b0;
end 
// int_din[ 2 ]
initial
begin
	int_din[2] = 1'b0;
	int_din[2] = #260000 1'b1;
	int_din[2] = #20000 1'b0;
end 
// int_din[ 1 ]
initial
begin
	int_din[1] = 1'b0;
	int_din[1] = #260000 1'b1;
	int_din[1] = #20000 1'b0;
end 
// int_din[ 0 ]
initial
begin
	int_din[0] = 1'b0;
	int_din[0] = #260000 1'b1;
	int_din[0] = #20000 1'b0;
	int_din[0] = #20000 1'b1;
	int_din[0] = #20000 1'b0;
end 

// cbs_fifo_empty
initial
begin
	cbs_fifo_empty = 1'b0;
end 
endmodule

